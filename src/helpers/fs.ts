import { promises as fs } from "fs";
import { dirname } from "path";

export type QueryInfo = {
  name: string;
  type: string;
  path: string;
  line: number;
  found: boolean;
};

export async function writeGraphQLReportToMarkdown(
  queries: QueryInfo[],
  outputPath: string,
  options?: {
    title?: string;
    includeStats?: boolean;
    includeTimestamp?: boolean;
  }
): Promise<void> {
  const {
    title = "GraphQL Operations Report",
    includeStats = true,
    includeTimestamp = true,
  } = options || {};

  // Ensure directory exists
  await fs.mkdir(dirname(outputPath), { recursive: true });

  const foundQueries = queries.filter((q) => q.found);
  const notFoundQueries = queries.filter((q) => !q.found);

  let markdown = `# ${title}\n\n`;

  if (includeTimestamp) {
    markdown += `Generated on: ${new Date().toISOString()}\n\n`;
  }

  if (includeStats) {
    markdown += `## Summary\n\n`;
    markdown += `- ‚úÖ **Implemented**: ${foundQueries.length}\n`;
    markdown += `- ‚ùå **Not Implemented**: ${notFoundQueries.length}\n`;
    markdown += `- üìä **Total Operations**: ${queries.length}\n\n`;
  }

  // Group by type
//   const queryOperations = queries.filter((q) => q.type === "Query");
//   const mutationOperations = queries.filter((q) => q.type === "Mutation");
//   const subscriptionOperations = queries.filter((q) => q.type === "Subscription");

//   // Helper function to create section
//   const createSection = (operations: QueryInfo[], sectionTitle: string) => {
//     if (operations.length === 0) return "";

//     let section = `## ${sectionTitle}\n\n`;

//     operations.forEach((op) => {
//       const checkbox = op.found ? "- [x]" : "- [ ]";
//       const status = op.found ? "‚úÖ" : "‚ùå";
//       const location = op.found ? ` - \`${op.path}:${op.line}\`` : "";

//       section += `${checkbox} **${op.name}** ${status}${location}\n`;
//     });

//     section += "\n";
//     return section;
//   };

//   // Add sections
//   if (queryOperations.length > 0) {
//     markdown += createSection(queryOperations, "Queries");
//   }

//   if (mutationOperations.length > 0) {
//     markdown += createSection(mutationOperations, "Mutations");
//   }

//   if (subscriptionOperations.length > 0) {
//     markdown += createSection(subscriptionOperations, "Subscriptions");
//   }

  // Add detailed table
  markdown += `## Detailed Table\n\n`;
  markdown += `| Operation | Type | Status | Location | Line |\n`;
  markdown += `|-----------|------|--------|----------|------|\n`;

  queries.forEach((query) => {
    const status = query.found ? "‚úÖ Found" : "‚ùå Not Found";
    const location = query.found ? query.path : "Not found";
    const line = query.found ? query.line.toString() : "-";

    markdown += `| ${query.name} | ${query.type} | ${status} | ${location} | ${line} |\n`;
  });

  markdown += "\n";

  // Add footer
  markdown += `---\n\n`;
  markdown += `*Report generated by vite-graphql-usages plugin*\n`;

  await fs.writeFile(outputPath, markdown, "utf-8");
  console.log(`üìù GraphQL report written to: ${outputPath}`);
}

// Helper function for use in the plugin
export async function writePluginReport(
  queries: QueryInfo[],
  outputFileName?: string
): Promise<void> {
  const defaultPath = "./graphql-operations-report.md";
  const outputPath = outputFileName || defaultPath;

  await writeGraphQLReportToMarkdown(queries, outputPath, {
    title: "GraphQL Operations Report",
    includeStats: true,
    includeTimestamp: true,
  });
}
